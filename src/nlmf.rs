use core::fmt::Debug;
use core::iter::Sum;
use core::ops::{Add, Div, Mul, Sub};
use rand_distr::num_traits::Float;

use itertools::Itertools;

use circular_queue::CircularQueue;

use packed_simd::f32x8;
use std::mem::MaybeUninit;

pub const N_TAPS: usize = 1024;

pub struct NLMF<T> {
    inputs: CircularQueue<T>,
    inputs_dot: CircularQueue<T>,
    pub weights: [T; N_TAPS],
    mu: T,
    eps: T,
}

impl NLMF<f32> {
    pub fn new(n: usize, mu: f32, eps: f32, weights: [f32; N_TAPS]) -> NLMF<f32> {
        assert!(
            n % 8 == 0,
            "Number of taps in NLMF filter must be divisible by 8 for SIMD optimization"
        );
        let mut initial_inputs = CircularQueue::with_capacity(n);
        let mut inputs_dot = CircularQueue::with_capacity(n);
        for i in 0..n {
            initial_inputs.push(0.0);
            inputs_dot.push(0.0);
        }
        NLMF {
            inputs: initial_inputs,
            inputs_dot: inputs_dot,
            weights,
            mu,
            eps,
        }
    }

    pub fn adapt(&mut self, input: f32, target: f32, novelty_threshold: f32) -> (f32, f32) {
        // let output: f32 = self.weights.iter().zip(input).map(|(&w, &x)| w * x).sum();
        self.inputs.push(input);
        self.inputs_dot.push(input * input);
        /*
        let input_chunks = {
            // initialize array uninitialized:
            let mut data: [MaybeUninit<[f32; 8]>; N_TAPS / 8] = unsafe {
                MaybeUninit::uninit().assume_init()
            };
            for (elem, chunk) in data.iter_mut().zip(self.inputs.asc_iter().chunks(8).into_iter()) {
                let init_chunk = {
                    let uninit_chunk: [MaybeUninit<f32>; 8] = unsafe {
                        MaybeUninit::uninit().assume_init()
                    };
                    for (elem_in_chunk, &x) in uninit_chunk.iter_mut().zip(chunk) {
                        *elem_in_chunk = MaybeUninit::new(x);
                    }
                    // Everything is initialized. Transmute the array to the
                    // initialized type.
                    unsafe { std::mem::transmute::<_, [f32; 8]>(uninit_chunk) }
                };

                *elem = MaybeUninit::new(init_chunk);
            }
            // Everything is initialized. Transmute the array to the
            // initialized type.
            unsafe { std::mem::transmute::<_, [[f32; 8]; N_TAPS / 8]>(data) }
        };
        */

        let current_input = self.inputs.asc_iter().map(|&val| val).collect_vec();
        let output: f32 = current_input
            .chunks_exact(8)
            .map(f32x8::from_slice_unaligned)
            .zip(
                self.weights
                    .chunks_exact(8)
                    .map(f32x8::from_slice_unaligned),
            )
            .map(|(a, b)| a * b)
            .sum::<f32x8>()
            .sum();
        /*
        let output: f32 = self.inputs.asc_iter()
            .chunks(8)
            .into_iter()
            .map(|chunk_iter| {
                let mut arr: [f32; 8] = [0.0; 8];
                for (x, &x_in_chunk) in arr.iter_mut().zip(chunk_iter) {
                    *x = x_in_chunk;
                }
                f32x8::from_slice_unaligned(&arr)
                })
            .zip(self.weights.chunks_exact(8).map(f32x8::from_slice_unaligned))
            .map(|(a, b)| a * b)
            .sum::<f32x8>()
            .sum();
            */
        let error: f32 = target - output;
        let input_dot: f32 = self
            .inputs_dot
            .asc_iter()
            .map(|val| *val)
            .collect_vec()
            .iter()
            .sum();
        let nu: f32 = self.mu / (self.eps + input_dot);
        //self.w += nu * x * e**3
        let mut novelty: f32 = 0.0;
        let mut dws: [f32; N_TAPS] = [0.0; N_TAPS];
        for (w, x) in dws.iter_mut().zip(self.inputs.asc_iter()) {
            let dw: f32 = nu * error * x;
            let nov = (dw * error).abs();
            if nov > novelty {
                novelty = nov;
            }
            *w = dw;
        }
        if novelty < novelty_threshold {
            for (w, dw) in self.weights.iter_mut().zip(dws.iter()) {
                *w = *w + dw;
                assert!(!(w.is_nan()));
            }
        };
        (output, novelty)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use float_cmp::approx_eq;
    #[test]
    fn test_nlmf_adapt() {
        let weights: [f32; N_TAPS] = [0.0; N_TAPS];
        let (n, mu, eps) = (1024, 2.0, 0.5);
        let mut nlmf_filter: NLMF<f32> = NLMF::new(n, mu, eps, weights);
        let filter_input: Vec<f32> = (1..1024).map(|x| x as f32).collect();
        let target = 512.0_f32;
        for input in filter_input {
            let (_, _) = nlmf_filter.adapt(input, target, f32::MAX);
        }
        const ref_weights: [f32; 1024] = [
            0.0,
            0.024178036,
            0.024142694,
            0.048356164,
            0.048285298,
            0.07253438,
            0.07242783,
            0.09671267,
            0.09657026,
            0.120891064,
            0.12071259,
            0.14506955,
            0.14485484,
            0.16924809,
            0.16899705,
            0.1934268,
            0.19313908,
            0.2176055,
            0.21728106,
            0.24178436,
            0.24142295,
            0.26596332,
            0.26556474,
            0.29014236,
            0.28970647,
            0.31432146,
            0.31384814,
            0.33850062,
            0.3379895,
            0.36267984,
            0.36213094,
            0.38685936,
            0.38627225,
            0.4110388,
            0.41041353,
            0.43521845,
            0.43455458,
            0.4593982,
            0.4586957,
            0.483578,
            0.48283663,
            0.50775784,
            0.50697744,
            0.53193784,
            0.5311183,
            0.55611813,
            0.5552587,
            0.5802982,
            0.57939935,
            0.60447836,
            0.6035398,
            0.62865865,
            0.62767994,
            0.65283906,
            0.65182036,
            0.67701995,
            0.6759604,
            0.7012008,
            0.7001006,
            0.72538143,
            0.7242402,
            0.7495623,
            0.74838,
            0.7737436,
            0.7725195,
            0.7979245,
            0.796659,
            0.82210606,
            0.82079864,
            0.846287,
            0.8449379,
            0.87046874,
            0.8690772,
            0.89464986,
            0.8932165,
            0.9188321,
            0.9173553,
            0.9430138,
            0.9414948,
            0.9671954,
            0.9656331,
            0.9913776,
            0.9897717,
            1.0155598,
            1.0139109,
            1.0397425,
            1.0380483,
            1.0639242,
            1.0621878,
            1.0881071,
            1.0863254,
            1.1122899,
            1.1104633,
            1.1364732,
            1.1346016,
            1.160655,
            1.1587391,
            1.1848385,
            1.1828762,
            1.2090213,
            1.2070138,
            1.2332047,
            1.2311507,
            1.2573882,
            1.2552884,
            1.2815715,
            1.2794263,
            1.3057562,
            1.3035634,
            1.3299388,
            1.3276991,
            1.3541236,
            1.3518369,
            1.3783065,
            1.3759733,
            1.4024915,
            1.4001086,
            1.4266753,
            1.4242455,
            1.4508594,
            1.4483824,
            1.4750439,
            1.4725189,
            1.4992294,
            1.496654,
            1.5234139,
            1.5207903,
            1.5475992,
            1.5449259,
            1.5717847,
            1.5690618,
            1.5959705,
            1.5931966,
            1.6201557,
            1.6173319,
            1.64434,
            1.6414667,
            1.668527,
            1.6656032,
            1.6927112,
            1.689737,
            1.716897,
            1.7138704,
            1.7410841,
            1.7380064,
            1.7652705,
            1.7621394,
            1.7894574,
            1.786274,
            1.8136429,
            1.8104086,
            1.837831,
            1.8345431,
            1.8620167,
            1.8586769,
            1.886204,
            1.8828113,
            1.9103905,
            1.906943,
            1.934578,
            1.9310774,
            1.9587667,
            1.9552106,
            1.982954,
            1.9793433,
            2.0071416,
            2.0034761,
            2.0313284,
            2.027609,
            2.0555184,
            2.0517404,
            2.0797052,
            2.0758739,
            2.1038935,
            2.1000054,
            2.1280835,
            2.1241374,
            2.1522703,
            2.1482706,
            2.1764603,
            2.172401,
            2.200649,
            2.196532,
            2.2248394,
            2.2206633,
            2.2490275,
            2.2447944,
            2.2732162,
            2.2689283,
            2.297408,
            2.2930582,
            2.321596,
            2.3171878,
            2.3457854,
            2.3413174,
            2.3699775,
            2.3654494,
            2.3941667,
            2.3895798,
            2.4183578,
            2.4137096,
            2.4425502,
            2.4378395,
            2.4667406,
            2.4619684,
            2.490931,
            2.4860978,
            2.5151246,
            2.510226,
            2.5393124,
            2.534354,
            2.5635061,
            2.5584836,
            2.5877,
            2.5826123,
            2.611892,
            2.6067405,
            2.6360831,
            2.630871,
            2.6602762,
            2.6549969,
            2.684467,
            2.6791258,
            2.7086623,
            2.7032528,
            2.7328563,
            2.7273815,
            2.7570484,
            2.7515068,
            2.7812421,
            2.7756338,
            2.8054338,
            2.7997632,
            2.8296297,
            2.8238878,
            2.853821,
            2.8480144,
            2.8780193,
            2.8721445,
            2.902213,
            2.8962693,
            2.9264076,
            2.9203908,
            2.9506023,
            2.9445212,
            2.9747977,
            2.9686413,
            2.9989936,
            2.99277,
            3.0231907,
            3.0168936,
            3.0473845,
            3.0410185,
            3.0715828,
            3.065139,
            3.0957792,
            3.0892646,
            3.11997,
            3.1133912,
            3.1441705,
            3.137513,
            3.1683664,
            3.1616368,
            3.192565,
            3.18576,
            3.21676,
            3.2098851,
            3.2409582,
            3.234004,
            3.265159,
            3.2581277,
            3.289359,
            3.282252,
            3.3135538,
            3.3063743,
            3.3377538,
            3.330493,
            3.3619542,
            3.354612,
            3.386153,
            3.3787403,
            3.4103515,
            3.4028568,
            3.4345496,
            3.4269786,
            3.4587502,
            3.4510965,
            3.4829526,
            3.4752169,
            3.5071518,
            3.4993415,
            3.5313516,
            3.5234601,
            3.555552,
            3.547577,
            3.579753,
            3.5716946,
            3.603955,
            3.5958166,
            3.6281576,
            3.6199384,
            3.652361,
            3.6440535,
            3.676567,
            3.6681755,
            3.7007658,
            3.692287,
            3.7249713,
            3.7164052,
            3.7491708,
            3.740522,
            3.7733774,
            3.764646,
            3.7975807,
            3.788754,
            3.8217833,
            3.8128755,
            3.8459876,
            3.8369906,
            3.8701954,
            3.8611038,
            3.8943982,
            3.885222,
            3.9186034,
            3.9093335,
            3.942809,
            3.9334486,
            3.9670134,
            3.9575639,
            3.991219,
            3.9816775,
            4.015431,
            4.0057926,
            4.0396357,
            4.0299034,
            4.063844,
            4.0540156,
            4.0880466,
            4.078129,
            4.112262,
            4.102238,
            4.1364665,
            4.1263514,
            4.16068,
            4.1504655,
            4.1848874,
            4.1745753,
            4.2090955,
            4.1986876,
            4.233305,
            4.2227964,
            4.257516,
            4.24691,
            4.281728,
            4.271018,
            4.305941,
            4.2951274,
            4.330148,
            4.319235,
            4.3543577,
            4.3433475,
            4.3785667,
            4.36745,
            4.402788,
            4.391563,
            4.4269934,
            4.4156694,
            4.451212,
            4.4397755,
            4.475428,
            4.4638786,
            4.499638,
            4.4879904,
            4.523862,
            4.5120983,
            4.5480742,
            4.5361977,
            4.5722847,
            4.560304,
            4.5965004,
            4.5844054,
            4.62072,
            4.6085143,
            4.644933,
            4.632619,
            4.6691527,
            4.656717,
            4.6933684,
            4.680814,
            4.71758,
            4.7049212,
            4.7418013,
            4.7290263,
            4.7660275,
            4.7531238,
            4.790237,
            4.7772207,
            4.8144574,
            4.801324,
            4.8386803,
            4.825427,
            4.862902,
            4.8495255,
            4.8871255,
            4.8736277,
            4.911355,
            4.897717,
            4.935568,
            4.9218235,
            4.959788,
            4.945917,
            4.9840064,
            4.9700146,
            5.0082407,
            4.9941077,
            5.032462,
            5.018207,
            5.0566845,
            5.0423,
            5.080912,
            5.0663996,
            5.1051383,
            5.0904856,
            5.129359,
            5.114583,
            5.1535854,
            5.1386843,
            5.17782,
            5.1627717,
            5.202047,
            5.1868653,
            5.2262764,
            5.2109556,
            5.2505116,
            5.235041,
            5.2747383,
            5.2591357,
            5.298975,
            5.2832265,
            5.3232,
            5.3073096,
            5.3474355,
            5.3313947,
            5.371665,
            5.355486,
            5.395894,
            5.3795714,
            5.4201274,
            5.4036636,
            5.444371,
            5.4277453,
            5.468604,
            5.45183,
            5.492831,
            5.475913,
            5.51707,
            5.500003,
            5.5413094,
            5.5240755,
            5.565544,
            5.5481606,
            5.5897827,
            5.5722404,
            5.6140203,
            5.5963206,
            5.6382694,
            5.620406,
            5.662503,
            5.6444902,
            5.686746,
            5.668568,
            5.7109876,
            5.6926365,
            5.7352295,
            5.71672,
            5.759473,
            5.740788,
            5.7837143,
            5.764866,
            5.807958,
            5.788947,
            5.832205,
            5.813024,
            5.8564487,
            5.8370943,
            5.8806977,
            5.8611674,
            5.9049497,
            5.8852363,
            5.9292016,
            5.9093065,
            5.9534435,
            5.933384,
            5.9777026,
            5.9574423,
            6.0019464,
            5.9815097,
            6.026204,
            6.005574,
            6.0504503,
            6.0296516,
            6.07471,
            6.0537157,
            6.0989656,
            6.0777774,
            6.123225,
            6.101832,
            6.1474733,
            6.125909,
            6.171728,
            6.1499596,
            6.1959963,
            6.1740365,
            6.220258,
            6.1980886,
            6.2445188,
            6.222147,
            6.268772,
            6.2461963,
            6.2930393,
            6.270253,
            6.317305,
            6.294318,
            6.341571,
            6.318366,
            6.3658295,
            6.3424253,
            6.390099,
            6.3664804,
            6.4143667,
            6.390513,
            6.4386315,
            6.414585,
            6.462901,
            6.4386306,
            6.4871697,
            6.462672,
            6.5114555,
            6.486719,
            6.5357246,
            6.510769,
            6.5599966,
            6.534814,
            6.5842686,
            6.55886,
            6.608552,
            6.582895,
            6.6328216,
            6.606944,
            6.6571174,
            6.6309767,
            6.6813803,
            6.655025,
            6.705674,
            6.679057,
            6.7299504,
            6.7030826,
            6.754243,
            6.7271285,
            6.778521,
            6.751152,
            6.802806,
            6.775193,
            6.8271003,
            6.799222,
            6.8513985,
            6.823247,
            6.87568,
            6.8472753,
            6.8999767,
            6.8713055,
            6.924262,
            6.895316,
            6.948555,
            6.919341,
            6.972865,
            6.9433737,
            6.9971647,
            6.967385,
            7.021453,
            6.991412,
            7.0457573,
            7.0154247,
            7.070068,
            7.039445,
            7.0943775,
            7.06345,
            7.118678,
            7.0874586,
            7.1429873,
            7.1114726,
            7.167286,
            7.1354704,
            7.1916094,
            7.1594863,
            7.215911,
            7.183487,
            7.2402287,
            7.2075005,
            7.2645607,
            7.2315016,
            7.2888694,
            7.2554884,
            7.3131943,
            7.2794847,
            7.3375134,
            7.303499,
            7.361849,
            7.327482,
            7.386169,
            7.3514814,
            7.4105043,
            7.3754663,
            7.43483,
            7.399438,
            7.45916,
            7.4234347,
            7.4834948,
            7.447412,
            7.5078297,
            7.4714017,
            7.532184,
            7.495375,
            7.556516,
            7.519344,
            7.5808544,
            7.5433183,
            7.6052003,
            7.567299,
            7.6295595,
            7.591264,
            7.653896,
            7.6152334,
            7.678261,
            7.639183,
            7.7026134,
            7.663151,
            7.7269726,
            7.6871133,
            7.751329,
            7.711066,
            7.7757034,
            7.735032,
            7.800057,
            7.758962,
            7.824445,
            7.7829237,
            7.848795,
            7.806857,
            7.8731785,
            7.8307986,
            7.8975563,
            7.8547454,
            7.921949,
            7.8786826,
            7.946325,
            7.9026203,
            7.9707127,
            7.9265327,
            7.9950905,
            7.9504557,
            8.019492,
            7.9743843,
            8.043895,
            7.9983025,
            8.068293,
            8.02221,
            8.092685,
            8.046124,
            8.117089,
            8.070041,
            8.141513,
            8.093947,
            8.16592,
            8.117845,
            8.190342,
            8.1417465,
            8.214769,
            8.165644,
            8.239182,
            8.189538,
            8.263622,
            8.213429,
            8.288044,
            8.23729,
            8.312479,
            8.261176,
            8.336923,
            8.285067,
            8.361368,
            8.308929,
            8.385817,
            8.332792,
            8.41028,
            8.356633,
            8.434733,
            8.380516,
            8.459196,
            8.404359,
            8.483637,
            8.428178,
            8.508132,
            8.452039,
            8.532619,
            8.475885,
            8.557095,
            8.499716,
            8.581569,
            8.5235405,
            8.606072,
            8.547371,
            8.630579,
            8.571176,
            8.655065,
            8.594984,
            8.679574,
            8.618806,
            8.704108,
            8.642573,
            8.728595,
            8.666402,
            8.753156,
            8.690176,
            8.777655,
            8.713946,
            8.802181,
            8.737704,
            8.826746,
            8.761503,
            8.851304,
            8.785227,
            8.875843,
            8.809012,
            8.900407,
            8.832735,
            8.924967,
            8.856502,
            8.949575,
            8.880217,
            8.97417,
            8.903935,
            8.998766,
            8.92767,
            9.023354,
            8.951372,
            9.047985,
            8.975082,
            9.072581,
            8.998764,
            9.097229,
            9.022443,
            9.121848,
            9.04613,
            9.146468,
            9.069764,
            9.171126,
            9.093435,
            9.195808,
            9.11707,
            9.220467,
            9.140722,
            9.245142,
            9.164334,
            9.269834,
            9.187951,
            9.2945385,
            9.211561,
            9.319247,
            9.235152,
            9.343994,
            9.258751,
            9.368704,
            9.282289,
            9.393424,
            9.305858,
            9.418187,
            9.329416,
            9.442967,
            9.35296,
            9.46772,
            9.376497,
            9.492533,
            9.400002,
            9.517339,
            9.423497,
            9.542161,
            9.446987,
            9.567011,
            9.470412,
            9.591853,
            9.493886,
            9.616683,
            9.517311,
            9.641589,
            9.540733,
            9.666481,
            9.564134,
            9.691383,
            9.587511,
            9.716273,
            9.610929,
            9.741252,
            9.63426,
            9.766212,
            9.657586,
            9.791205,
            9.680898,
            9.8162,
            9.704221,
            9.841189,
            9.727465,
            9.866227,
            9.750701,
            9.891316,
            9.773935,
            9.916375,
            9.79714,
            9.941483,
            9.820368,
            9.966602,
            9.843532,
            9.991755,
            9.866639,
            10.01691,
            9.889734,
            10.04214,
            9.912847,
            10.06735,
            9.935854,
            10.09262,
            9.958909,
            10.117892,
            9.981922,
            10.143189,
            10.004877,
            10.168558,
            10.027819,
            10.193893,
            10.050705,
            10.219318,
            10.073574,
            10.244737,
            10.096403,
            10.27021,
            10.119206,
            10.295718,
            10.1419525,
            10.321274,
            10.164679,
            10.346871,
            10.1873455,
            10.372506,
            10.209963,
            10.398194,
            10.232555,
            10.423897,
            10.255105,
            10.44967,
            10.2775755,
            10.475449,
            10.299984,
            10.5013275,
            10.322365,
            10.527232,
            10.344687,
            10.553207,
            10.366957,
            10.579226,
            10.389154,
            10.605338,
            10.411297,
            10.631498,
            10.433361,
            10.657693,
            10.455364,
            10.683978,
            10.477295,
            10.710337,
            10.499132,
            10.736795,
            10.520902,
            10.763308,
            10.542571,
            10.789915,
            10.564151,
            10.816571,
            10.5856495,
            10.843362,
            10.607072,
            10.870232,
            10.628368,
            10.897197,
            10.649534,
            10.924283,
            10.670608,
            10.951515,
            10.691544,
            10.978811,
            10.712353,
            11.0062475,
            10.733053,
            11.0338125,
            10.753592,
            11.061556,
            10.773962,
            11.089425,
            10.7941475,
            11.117456,
            10.814186,
            11.145637,
            10.834046,
            11.17403,
            10.853737,
            11.20259,
            10.87319,
            11.231341,
            10.892414,
            11.260316,
            10.911367,
            11.2895565,
            10.930184,
            11.318969,
            10.948626,
            11.348722,
            10.966798,
            11.378705,
            10.9847,
            11.409025,
            11.002232,
            11.439623,
            11.019365,
            11.470569,
            11.036188,
            11.501949,
            11.052523,
            11.53367,
            11.068464,
            11.565872,
            11.083889,
            11.598501,
            11.098774,
            11.631685,
            11.113075,
            11.665413,
            11.126799,
            11.699699,
            11.139801,
            11.73476,
            11.152025,
            11.770418,
            11.163452,
            11.806852,
            11.173925,
            11.844297,
            11.183434,
            11.882639,
            11.191868,
            11.922047,
            11.199015,
            11.962561,
            11.204819,
            12.004375,
            11.209021,
            12.047686,
            11.211645,
            12.092579,
            11.212254,
            12.139368,
            11.210638,
            12.188122,
            11.206661,
            12.239283,
            11.199795,
            12.293016,
            11.189758,
            12.349785,
            11.175947,
            12.41008,
            11.157856,
            12.474302,
            11.134802,
            12.543211,
            11.105789,
            12.6175785,
            11.069784,
            12.698404,
            11.02544,
            12.78681,
            10.971115,
            12.884409,
            10.904528,
            12.993134,
            10.822882,
            13.115456,
            10.722385,
            13.254671,
            10.598015,
            13.415091,
            10.442785,
            13.602827,
            10.247162,
            13.825914,
            9.99679,
            14.096149,
            9.670805,
            14.430809,
            9.236475,
            14.856279,
            8.640289,
            15.414375,
            7.789671,
            16.175777,
            6.510847,
            17.26741,
            4.4426975,
            18.939922,
            0.7153683,
            21.753412,
            -7.287609,
            27.215586,
            -31.144201,
            41.037422,
            -197.08409,
            247.46121,
        ];

        for (&ref_weight, &weight) in ref_weights.iter().zip(nlmf_filter.weights.iter()) {
            assert!(
                approx_eq!(f32, ref_weight, weight, ulps = 10),
                "failed weight: {} {}",
                ref_weight,
                weight
            );
        }

        let (output, _) = nlmf_filter.adapt(0.0, target, f32::MAX);
        assert!(
            approx_eq!(f32, output, 4073949.5, ulps = 10),
            "Output check failed (output = {})",
            output
        );
    }
}
